@page "/products/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3>Products</h3>

<a href="/products/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Product
</a>


@if (Products == null)
{
    <div class="alert alert-info">Loading Products...</div>
}
else
{
    <table class="table table-reponsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Dimension</th>
                <th>Picture</th>
                <th>Category</th>
                @*                 <th>Added By</th>
            *@
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>@product.Quantity</td>
                    <td>@product.ProductDimension</td>
                    <td>@product.ProductPicture</td>
                    <td>@product.Category.Name</td>
                    @*                     <td>@product.UserID</td> <!-- Display the username of the user who added the product -->
            *@
                    <td>
                        <a href="/colours/view/@product.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/colours/edit/@product.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(product.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product>? Products;

    protected override async Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }

    async Task Delete(int productId)
    {
        if (Products != null)
        {
            var product = Products.First(q => q.Id == productId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{productId}");
                await OnInitializedAsync();
            }
        }
    }
}
